@page "/templates"
@rendermode InteractiveServer
@using AutomationTool.Services
@using AutomationTool.Models
@inject IScriptStorageService ScriptStorage
@inject IJSRuntime JSRuntime

<PageTitle>Template Images</PageTitle>

<div class="d-flex justify-content-between align-items-center mb-4">
    <div>
        <h1 class="mb-1">üñºÔ∏è Template Images</h1>
        <p class="text-muted mb-0">Manage image templates for automation scripts</p>
    </div>
    <div class="d-flex gap-3 align-items-center">
        <div class="text-end">
            <div class="small text-muted">Total Templates</div>
            <div class="h4 mb-0">@templates.Count</div>
        </div>
        <div class="vr"></div>
        <div class="text-end">
            <div class="small text-muted">Total Size</div>
            <div class="h4 mb-0">@(templates.Sum(t => t.ImageData?.Length ?? 0) / 1024) KB</div>
        </div>
    </div>
</div>

<!-- Search and Filter Bar -->
@if (templates.Any())
{
    <div class="card mb-3">
        <div class="card-body py-2">
            <div class="row g-2 align-items-center">
                <div class="col-md-6">
                    <div class="input-group input-group-sm">
                        <span class="input-group-text">üîç</span>
                        <input type="text" class="form-control" placeholder="Search templates by name..." @bind="searchQuery" @bind:event="oninput">
                        @if (!string.IsNullOrEmpty(searchQuery))
                        {
                            <button class="btn btn-outline-secondary" @onclick="ClearSearch">‚úï</button>
                        }
                    </div>
                </div>
                <div class="col-md-6 text-end">
                    <small class="text-muted">Showing @FilteredTemplates.Count of @templates.Count templates</small>
                </div>
            </div>
        </div>
    </div>
}

<!-- Templates List -->
@if (FilteredTemplates.Any())
{
    <div class="card">
        <div class="table-responsive">
            <table class="table table-hover align-middle mb-0">
                <thead class="table-light">
                    <tr>
                        <th style="width: 80px;">Preview</th>
                        <th>Name</th>
                        <th style="width: 120px;">Size</th>
                        <th style="width: 150px;">Position</th>
                        <th style="width: 100px;">Threshold</th>
                        <th style="width: 120px;">Created</th>
                        <th style="width: 170px;" class="text-end">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var template in FilteredTemplates)
                    {
                        <tr class="@(selectedTemplate?.Id == template.Id ? "table-active" : "")">
                            <td>
                                @if (template.ImageData != null && template.ImageData.Length > 0)
                                {
                                    <img src="data:image/png;base64,@Convert.ToBase64String(template.ImageData)" 
                                         class="rounded border" 
                                         alt="@template.Name"
                                         style="width: 60px; height: 60px; object-fit: contain; background-color: #f8f9fa; cursor: pointer;"
                                         @onclick="() => PreviewTemplate(template)"
                                         title="Click to preview">
                                }
                                else
                                {
                                    <div class="rounded border d-flex align-items-center justify-content-center bg-light" 
                                         style="width: 60px; height: 60px;">
                                        <span class="text-muted small">No Image</span>
                                    </div>
                                }
                            </td>
                            <td>
                                <div class="fw-semibold">@template.Name</div>
                                <div class="small text-muted">ID: @template.Id.Substring(0, 8)...</div>
                            </td>
                            <td>
                                <span class="badge bg-light text-dark border">
                                    @template.CaptureRegion.Width √ó @template.CaptureRegion.Height
                                </span>
                            </td>
                            <td class="small text-muted">
                                X: @template.CaptureRegion.X<br>
                                Y: @template.CaptureRegion.Y
                            </td>
                            <td>
                                <div class="d-flex align-items-center">
                                    <div class="progress flex-fill me-2" style="height: 6px; width: 50px;">
                                        <div class="progress-bar bg-success" role="progressbar" 
                                             style="width: @((template.MatchThreshold * 100))%"></div>
                                    </div>
                                    <small class="text-nowrap">@((template.MatchThreshold * 100).ToString("F0"))%</small>
                                </div>
                            </td>
                            <td class="small text-muted">
                                @template.CreatedAt.ToString("MM/dd/yyyy")<br>
                                @template.CreatedAt.ToString("HH:mm")
                            </td>
                            <td class="text-end">
                                <div class="d-flex gap-1 justify-content-end">
                                    <button class="btn btn-sm btn-outline-primary" @onclick="() => EditTemplate(template)" title="Edit template">
                                        Edit
                                    </button>
                                    <button class="btn btn-sm btn-outline-danger" @onclick="() => ConfirmDelete(template)" title="Delete template">
                                        Delete
                                    </button>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
}
else if (templates.Any() && !FilteredTemplates.Any())
{
    <div class="card">
        <div class="card-body text-center py-5">
            <div class="display-4 mb-3">üîç</div>
            <h5>No templates found</h5>
            <p class="text-muted">Try adjusting your search criteria</p>
            <button class="btn btn-outline-primary" @onclick="ClearSearch">Clear Search</button>
        </div>
    </div>
}
else
{
    <div class="card">
        <div class="card-body text-center py-5">
            <div class="display-1 mb-3">üñºÔ∏è</div>
            <h5>No Template Images</h5>
            <p class="text-muted">Template images are created from the Screenshot page by entering a name and clicking "Save as Template".</p>
            <a href="/screenshot" class="btn btn-primary btn-lg mt-2">
                üì∑ Go to Screenshot Page
            </a>
        </div>
    </div>
}

<!-- Status Messages -->
@if (!string.IsNullOrEmpty(statusMessage))
{
    <div class="position-fixed bottom-0 end-0 p-3" style="z-index: 11">
        <div class="alert @statusClass alert-dismissible fade show shadow-lg" role="alert">
            <strong>@statusMessage</strong>
            <button type="button" class="btn-close" @onclick="ClearStatus"></button>
        </div>
    </div>
}

<!-- Edit Template Modal -->
@if (selectedTemplate != null && !showPreview)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">‚úèÔ∏è Edit Template</h5>
                    <button type="button" class="btn-close" @onclick="CancelEdit"></button>
                </div>
                <div class="modal-body">
                    <!-- Template Preview -->
                    <div class="mb-3 text-center">
                        @if (selectedTemplate.ImageData != null && selectedTemplate.ImageData.Length > 0)
                        {
                            <img src="data:image/png;base64,@Convert.ToBase64String(selectedTemplate.ImageData)" 
                                 class="img-fluid rounded border" 
                                 alt="@selectedTemplate.Name"
                                 style="max-height: 200px; background-color: #f8f9fa;">
                        }
                    </div>

                    <!-- Template Name -->
                    <div class="mb-3">
                        <label class="form-label fw-semibold">Template Name</label>
                        <input type="text" class="form-control" @bind="selectedTemplate.Name" placeholder="Enter template name">
                    </div>
                    
                    <!-- Match Threshold -->
                    <div class="mb-3">
                        <label class="form-label fw-semibold">Match Threshold</label>
                        <div class="d-flex align-items-center gap-2">
                            <input type="range" class="form-range flex-fill" min="0.1" max="1.0" step="0.05" 
                                   @bind="selectedTemplate.MatchThreshold" @bind:event="oninput">
                            <span class="badge bg-primary" style="min-width: 60px;">@((selectedTemplate.MatchThreshold * 100).ToString("F0"))%</span>
                        </div>
                        <small class="text-muted">Higher values require more exact matches (recommended: 80-95%)</small>
                    </div>

                    <!-- Template Info -->
                    <div class="card bg-light border-0">
                        <div class="card-body py-2">
                            <div class="row small">
                                <div class="col-6">
                                    <strong>Size:</strong> @selectedTemplate.CaptureRegion.Width √ó @selectedTemplate.CaptureRegion.Height
                                </div>
                                <div class="col-6">
                                    <strong>Position:</strong> (@selectedTemplate.CaptureRegion.X, @selectedTemplate.CaptureRegion.Y)
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CancelEdit">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick="SaveTemplate" disabled="@isSaving">
                        @if (isSaving)
                        {
                            <span class="spinner-border spinner-border-sm me-1" role="status"></span>
                            <span>Saving...</span>
                        }
                        else
                        {
                            <span>üíæ Save Changes</span>
                        }
                    </button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

<!-- Preview Template Modal -->
@if (showPreview && previewTemplate != null)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog modal-lg modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">üîç Preview: @previewTemplate.Name</h5>
                    <button type="button" class="btn-close" @onclick="ClosePreview"></button>
                </div>
                <div class="modal-body text-center">
                    @if (previewTemplate.ImageData != null && previewTemplate.ImageData.Length > 0)
                    {
                        <img src="data:image/png;base64,@Convert.ToBase64String(previewTemplate.ImageData)" 
                             class="img-fluid rounded border" 
                             alt="@previewTemplate.Name"
                             style="max-width: 100%; background-color: #f8f9fa;">
                    }
                    <div class="mt-3">
                        <div class="row text-start">
                            <div class="col-md-6">
                                <small class="text-muted">Size:</small> <strong>@previewTemplate.CaptureRegion.Width √ó @previewTemplate.CaptureRegion.Height</strong>
                            </div>
                            <div class="col-md-6">
                                <small class="text-muted">Position:</small> <strong>(@previewTemplate.CaptureRegion.X, @previewTemplate.CaptureRegion.Y)</strong>
                            </div>
                            <div class="col-md-6 mt-2">
                                <small class="text-muted">Threshold:</small> <strong>@((previewTemplate.MatchThreshold * 100).ToString("F0"))%</strong>
                            </div>
                            <div class="col-md-6 mt-2">
                                <small class="text-muted">Created:</small> <strong>@previewTemplate.CreatedAt.ToString("MM/dd/yyyy HH:mm")</strong>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="ClosePreview">Close</button>
                    <button type="button" class="btn btn-primary" @onclick="() => EditTemplateFromPreview()">‚úèÔ∏è Edit Template</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

<!-- Delete Confirmation Modal -->
@if (showDeleteConfirmation && templateToDelete != null)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content border-danger">
                <div class="modal-header bg-danger text-white">
                    <h5 class="modal-title">üóëÔ∏è Confirm Delete</h5>
                    <button type="button" class="btn-close btn-close-white" @onclick="CancelDelete"></button>
                </div>
                <div class="modal-body">
                    <div class="text-center mb-3">
                        @if (templateToDelete.ImageData != null && templateToDelete.ImageData.Length > 0)
                        {
                            <img src="data:image/png;base64,@Convert.ToBase64String(templateToDelete.ImageData)" 
                                 class="img-fluid rounded border" 
                                 alt="@templateToDelete.Name"
                                 style="max-height: 150px; background-color: #f8f9fa;">
                        }
                    </div>
                    <p class="text-center">Are you sure you want to delete the template <strong>"@templateToDelete.Name"</strong>?</p>
                    <div class="alert alert-warning mb-0">
                        <small>
                            <strong>‚ö†Ô∏è Warning:</strong> This action cannot be undone. Any scripts using this template may need to be updated.
                        </small>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CancelDelete">Cancel</button>
                    <button type="button" class="btn btn-danger" @onclick="DeleteTemplate" disabled="@isDeleting">
                        @if (isDeleting)
                        {
                            <span class="spinner-border spinner-border-sm me-1" role="status"></span>
                            <span>Deleting...</span>
                        }
                        else
                        {
                            <span>üóëÔ∏è Delete Template</span>
                        }
                    </button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    private List<TemplateImage> templates = new();
    private TemplateImage? selectedTemplate;
    private TemplateImage? templateToDelete;
    private TemplateImage? previewTemplate;
    private bool showDeleteConfirmation = false;
    private bool showPreview = false;
    private bool isSaving = false;
    private bool isDeleting = false;
    private string statusMessage = string.Empty;
    private string statusClass = string.Empty;
    private string searchQuery = string.Empty;

    private List<TemplateImage> FilteredTemplates
    {
        get
        {
            if (string.IsNullOrWhiteSpace(searchQuery))
                return templates;

            return templates.Where(t => 
                t.Name.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
                t.Id.Contains(searchQuery, StringComparison.OrdinalIgnoreCase)
            ).ToList();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadTemplates();
    }

    private async Task LoadTemplates()
    {
        try
        {
            templates = await ScriptStorage.GetAllTemplateImagesAsync();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            ShowStatus($"Error loading templates: {ex.Message}", "alert-danger");
        }
    }

    private void EditTemplate(TemplateImage template)
    {
        selectedTemplate = template;
        showDeleteConfirmation = false;
        showPreview = false;
        templateToDelete = null;
        previewTemplate = null;
        ClearStatus();
    }

    private void EditTemplateFromPreview()
    {
        if (previewTemplate != null)
        {
            selectedTemplate = previewTemplate;
            showPreview = false;
            previewTemplate = null;
        }
    }

    private void CancelEdit()
    {
        selectedTemplate = null;
        ClearStatus();
    }

    private void PreviewTemplate(TemplateImage template)
    {
        previewTemplate = template;
        showPreview = true;
        selectedTemplate = null;
        showDeleteConfirmation = false;
        ClearStatus();
    }

    private void ClosePreview()
    {
        showPreview = false;
        previewTemplate = null;
    }

    private void ConfirmDelete(TemplateImage template)
    {
        templateToDelete = template;
        showDeleteConfirmation = true;
        selectedTemplate = null;
        showPreview = false;
        ClearStatus();
    }

    private void CancelDelete()
    {
        showDeleteConfirmation = false;
        templateToDelete = null;
        ClearStatus();
    }

    private void ClearSearch()
    {
        searchQuery = string.Empty;
    }

    private async Task SaveTemplate()
    {
        if (selectedTemplate == null || string.IsNullOrWhiteSpace(selectedTemplate.Name))
        {
            ShowStatus("Please enter a template name.", "alert-warning");
            return;
        }

        try
        {
            isSaving = true;
            ClearStatus();

            await ScriptStorage.SaveTemplateImageAsync(selectedTemplate);
            await LoadTemplates();
            
            ShowStatus($"‚úÖ Template '{selectedTemplate.Name}' saved successfully!", "alert-success");
            selectedTemplate = null;
        }
        catch (Exception ex)
        {
            ShowStatus($"‚ùå Error saving template: {ex.Message}", "alert-danger");
        }
        finally
        {
            isSaving = false;
        }
    }

    private async Task DeleteTemplate()
    {
        if (templateToDelete == null) return;

        try
        {
            isDeleting = true;
            ClearStatus();

            await ScriptStorage.DeleteTemplateImageAsync(templateToDelete.Id);
            await LoadTemplates();
            
            ShowStatus($"‚úÖ Template '{templateToDelete.Name}' deleted successfully!", "alert-success");
            
            // Close the modal
            showDeleteConfirmation = false;
            templateToDelete = null;
        }
        catch (Exception ex)
        {
            ShowStatus($"‚ùå Error deleting template: {ex.Message}", "alert-danger");
        }
        finally
        {
            isDeleting = false;
        }
    }

    private void ShowStatus(string message, string cssClass)
    {
        statusMessage = message;
        statusClass = cssClass;
        StateHasChanged();
        
        // Auto-hide success messages after 3 seconds
        if (cssClass == "alert-success")
        {
            Task.Delay(3000).ContinueWith(_ => InvokeAsync(() =>
            {
                if (statusMessage == message) // Only clear if it's still the same message
                {
                    ClearStatus();
                }
            }));
        }
    }

    private void ClearStatus()
    {
        statusMessage = string.Empty;
        statusClass = string.Empty;
    }
}