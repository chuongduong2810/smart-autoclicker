@page "/scripts"
@using AutomationTool.Services
@using AutomationTool.Models
@using Microsoft.Extensions.Logging
@inject IScriptStorageService ScriptStorage
@inject IScriptExecutionService ScriptExecution
@inject IScreenshotService ScreenshotService
@inject NavigationManager Navigation
@inject ILogger<Scripts> _logger
@inject IWindowEnumerationService WindowEnumeration

<PageTitle>Script Management</PageTitle>

<h1>üìù Script Management</h1>

<!-- Hotkey Information -->
<div class="alert alert-info mb-3" role="alert">
    <small><strong>‚å®Ô∏è Global Hotkeys:</strong> <kbd>F9</kbd> Pause/Resume ‚Ä¢ <kbd>F10</kbd> Stop ‚Ä¢ <kbd>F11</kbd> Toggle Toolbar - Works anytime during script execution</small>
</div>

<div class="row">
    <div class="col-md-8">
        @if (selectedScript == null)
        {
            <!-- Script List View -->
            <div class="card">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <h5 class="card-title mb-0">Available Scripts</h5>
                        <button class="btn btn-primary" @onclick="CreateNewScript">
                            ‚ûï New Script
                        </button>
                    </div>

                    @if (scripts.Any())
                    {
                        <div class="table-responsive">
                            <table class="table table-hover">
                                <thead>
                                    <tr>
                                        <th>Name</th>
                                        <th>Description</th>
                                        <th>Steps</th>
                                        <th>Modified</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var script in scripts)
                                    {
                                        <tr>
                                            <td>
                                                <strong>@script.Name</strong>
                                                @if (script.IsActive)
                                                {
                                                    <span class="badge bg-success ms-2">Active</span>
                                                }
                                            </td>
                                            <td>@script.Description</td>
                                            <td>
                                                <span class="badge bg-primary">@script.Steps.Count</span>
                                                @if (script.IsInfiniteRepeat)
                                                {
                                                    <span class="badge bg-info ms-1">‚ôæÔ∏è</span>
                                                }
                                                else if (script.RepeatCount > 1)
                                                {
                                                    <span class="badge bg-secondary ms-1">@script.RepeatCount x</span>
                                                }
                                            </td>
                                            <td>@script.ModifiedAt.ToString("MM/dd/yyyy HH:mm")</td>
                                            <td>
                                                <div class="btn-group" role="group">
                                                    <button class="btn btn-sm btn-outline-primary" @onclick="() => EditScript(script)">
                                                        ‚úèÔ∏è Edit
                                                    </button>
                                                    <button class="btn btn-sm btn-outline-success" @onclick="() => RunScript(script.Id)">
                                                        ‚ñ∂Ô∏è Run
                                                    </button>
                                                    <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteScript(script.Id)">
                                                        üóëÔ∏è Delete
                                                    </button>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-5">
                            <div class="display-1">üìù</div>
                            <h5>No Scripts Available</h5>
                            <p class="text-muted">Create your first automation script to get started.</p>
                            <button class="btn btn-primary" @onclick="CreateNewScript">
                                Create First Script
                            </button>
                        </div>
                    }
                </div>
            </div>
        }
        else
        {
            <!-- Script Editor View -->
            <div class="card">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <h5 class="card-title mb-0">
                            @(isEditing ? "Edit Script" : "Create New Script")
                        </h5>
                        <div>
                            <button class="btn btn-outline-secondary me-2" @onclick="CancelEdit">
                                ‚ùå Cancel
                            </button>
                            <button class="btn btn-primary" @onclick="SaveScript" disabled="@isSaving">
                                @if (isSaving)
                                {
                                    <span class="spinner-border spinner-border-sm" role="status"></span>
                                    <text> Saving...</text>
                                }
                                else
                                {
                                    <text>üíæ Save Script</text>
                                }
                            </button>
                        </div>
                    </div>

                    <!-- Script Basic Information -->
                    <div class="row mb-4">
                        <div class="col-lg-6">
                            <label class="form-label">Script Name *</label>
                            <input type="text" class="form-control" @bind="selectedScript.Name" placeholder="Enter script name">
                        </div>
                        <div class="col-lg-6">
                            <label class="form-label">Description</label>
                            <input type="text" class="form-control" @bind="selectedScript.Description" placeholder="Brief description">
                        </div>
                    </div>

                    <!-- Target Window Selection -->
                    <div class="card mb-4">
                        <div class="card-header d-flex justify-content-between align-items-center">
                            <h6 class="mb-0">üéØ Target Window</h6>
                            <div class="form-check form-switch">
                                <input class="form-check-input" type="checkbox" id="targetWindowEnabled" @bind="TargetWindowEnabled">
                                <label class="form-check-label" for="targetWindowEnabled">Enable</label>
                            </div>
                        </div>
                        <div class="card-body">
                            @if (TargetWindowEnabled)
                            {
                            <WindowPicker SelectedHandle="selectedWindowHandle" SelectedHandleChanged="OnWindowHandleChanged" OnSelectionChanged="OnWindowSelected" />
                                @if (!string.IsNullOrEmpty(selectedWindowDescription))
                                {
                                    <div class="small text-muted mt-2">@selectedWindowDescription</div>
                                }
                            }
                            else
                            {
                                <div class="text-muted small">
                                    Window selection disabled. Script will interact with the current foreground window.
                                </div>
                            }
                        </div>
                    </div>

                    <!-- Repeat Configuration -->
                    <div class="card mb-4">
                        <div class="card-header">
                            <h6 class="mb-0">üîÑ Repeat Configuration</h6>
                        </div>
                        <div class="card-body">
                            <div class="row">
                                <div class="col-md-4">
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" @bind="selectedScript.IsInfiniteRepeat" id="infiniteRepeat">
                                        <label class="form-check-label" for="infiniteRepeat">
                                            <strong>‚ôæÔ∏è Infinite Repeat</strong>
                                        </label>
                                    </div>
                                    <small class="text-muted">Run script continuously until manually stopped</small>
                                </div>
                                <div class="col-md-4">
                                    <label class="form-label">Repeat Count</label>
                                    <input type="number" class="form-control" @bind="selectedScript.RepeatCount" 
                                           min="1" max="10000" disabled="@selectedScript.IsInfiniteRepeat"
                                           placeholder="Number of repetitions">
                                    <small class="text-muted">How many times to run the script</small>
                                </div>
                                <div class="col-md-4">
                                    <label class="form-label">Delay Between Repeats (ms)</label>
                                    <input type="number" class="form-control" @bind="selectedScript.DelayBetweenRepeats" 
                                           min="0" max="300000" placeholder="0">
                                    <small class="text-muted">Wait time between script repetitions</small>
                                </div>
                            </div>
                            <div class="mt-2">
                                @if (selectedScript.IsInfiniteRepeat)
                                {
                                    <div class="alert alert-info mb-0" role="alert">
                                        <i class="bi bi-info-circle"></i>
                                        <strong>Infinite Mode:</strong> Script will run continuously. Use the Stop button in Execution page to halt execution.
                                    </div>
                                }
                                else
                                {
                                    <div class="alert alert-light mb-0" role="alert">
                                        <i class="bi bi-play-circle"></i>
                                        <strong>Finite Mode:</strong> Script will run @selectedScript.RepeatCount time@(selectedScript.RepeatCount == 1 ? "" : "s") then stop automatically.
                                    </div>
                                }
                            </div>
                        </div>
                    </div>

                    <!-- Steps Section -->
                    <div class="mb-4">
                        <div class="d-flex justify-content-between align-items-center mb-3">
                            <h6>Script Steps</h6>
                            <button class="btn btn-sm btn-outline-primary" @onclick="AddStep">
                                ‚ûï Add Step
                            </button>
                        </div>

                        @if (selectedScript.Steps.Any())
                        {
                            @for (int i = 0; i < selectedScript.Steps.Count; i++)
                            {
                                var step = selectedScript.Steps[i];
                                var stepIndex = i;
                                
                                <div class="card mb-3 border-start border-primary border-3">
                                    <div class="card-body">
                                        <div class="row">
                                            <div class="col-md-8">
                                                <div class="row">
                                                    <div class="col-md-6">
                                                        <label class="form-label">Step Name</label>
                                                        <input type="text" class="form-control form-control-sm" @bind="step.Name" placeholder="Step name">
                                                    </div>
                                                    <div class="col-md-6">
                                                        <label class="form-label">Type</label>
                                                        <select class="form-select form-select-sm" @bind="step.Type">
                                                            <option value="condition">Condition</option>
                                                            <option value="action">Action</option>
                                                            <option value="wait">Wait</option>
                                                            <option value="jump">Jump</option>
                                                        </select>
                                                    </div>
                                                </div>
                                                
                                                @if (step.Type == "condition")
                                                {
                                                    step.Conditions ??= new List<ScriptCondition>();
                                                    step.Actions ??= new List<ScriptAction>();
                                                    <div class="mt-2">
                                                        <div class="d-flex justify-content-between align-items-center mb-2">
                                                            <label class="form-label mb-0">Conditions</label>
                                                            <button class="btn btn-sm btn-outline-primary" type="button" @onclick="() => AddCondition(step)">
                                                                ‚ûï Add Condition
                                                            </button>
                                                        </div>

                                                        @if (step.Conditions.Any())
                                                        {
                                                            foreach (var condition in step.Conditions)
                                                            {
                                                                <div class="border rounded p-2 bg-light mb-2">
                                                                    <div class="row g-2 align-items-center">
                                                                        <div class="col-md-3">
                                                                            <label class="form-label small mb-1">Type</label>
                                                                            <select class="form-select form-select-sm" value="@condition.Type" @onchange="(e) => OnConditionTypeChanged(step, condition, e.Value?.ToString() ?? string.Empty)">
                                                                                <option value="image_found">Image Found</option>
                                                                                <option value="image_not_found">Image Not Found</option>
                                                                                <option value="timeout">Timeout</option>
                                                                                <option value="always">Always</option>
                                                                                <option value="never">Never</option>
                                                                                <option value="variable_equals">Variable Equals</option>
                                                                                <option value="variable_not_equals">Variable Not Equals</option>
                                                                            </select>
                                                                        </div>
                                                                        <div class="col-md-3">
                                                                            <label class="form-label small mb-1">Operator</label>
                                                                            <select class="form-select form-select-sm" @bind="condition.Operator" @bind:event="onchange">
                                                                                <option value="AND">AND</option>
                                                                                <option value="OR">OR</option>
                                                                            </select>
                                                                        </div>
                                                                        <div class="col-md-5">
                                                                            @RenderConditionParameters(step, condition)
                                                                        </div>
                                                                        <div class="col-md-1 text-end">
                                                                            <button class="btn btn-sm btn-outline-danger" type="button" @onclick="() => RemoveCondition(step, condition)">üóëÔ∏è</button>
                                                                        </div>
                                                                    </div>
                                                                </div>
                                                            }
                                                        }
                                                        else
                                                        {
                                                            <div class="alert alert-light py-2 mb-0" role="alert">
                                                                <small>No conditions configured yet. Click "Add Condition" to begin.</small>
                                                            </div>
                                                        }
                                                    </div>

                                                    <div class="mt-3">
                                                        <label class="form-label">Success Actions</label>
                                                        <div class="border rounded p-2 bg-light">
                                                            @RenderConditionSuccessActions(step)
                                                        </div>
                                                    </div>

                                                    <div class="mt-2">
                                                        <label class="form-label">Else Step (Optional)</label>
                                                        <select class="form-select form-select-sm" @bind="step.ElseStepId">
                                                            <option value="">-- Continue to next step --</option>
                                                            @foreach (var otherStep in selectedScript.Steps)
                                                            {
                                                                <option value="@otherStep.Id">@otherStep.Name</option>
                                                            }
                                                        </select>
                                                    </div>
                                                }
                                                else if (step.Type == "action")
                                                {
                                                    <div class="mt-2">
                                                        <label class="form-label">Actions</label>
                                                        <div class="border rounded p-2 bg-light">
                                                            @if (step.Actions.Any())
                                                            {
                                                                @foreach (var action in step.Actions)
                                                                {
                                                                    <div class="d-flex align-items-center mb-2">
                                                                        <select class="form-select form-select-sm me-2" style="width: auto;" @bind="action.Type">
                                                                            <option value="click">Click</option>
                                                                            <option value="double_click">Double Click</option>
                                                                            <option value="right_click">Right Click</option>
                                                                            <option value="type">Type Text</option>
                                                                            <option value="key_press">Key Press</option>
                                                                            <option value="wait">Wait</option>
                                                                            <option value="screenshot">Screenshot</option>
                                                                        </select>
                                                                        
                                                                        @if (action.Type == "click" || action.Type == "double_click" || action.Type == "right_click")
                                                                        {
                                                                            <input type="number" class="form-control form-control-sm me-1" style="width: 80px;" 
                                                                                   placeholder="X" 
                                                                                   value="@(action.Parameters.GetValueOrDefault("x")?.ToString() ?? "")"
                                                                                   @onchange="(e) => UpdateActionParameterX(action, e.Value)">
                                                                            <input type="number" class="form-control form-control-sm me-1" style="width: 80px;" 
                                                                                   placeholder="Y" 
                                                                                   value="@(action.Parameters.GetValueOrDefault("y")?.ToString() ?? "")"
                                                                                   @onchange="(e) => UpdateActionParameterY(action, e.Value)">
                                                                            <button class="btn btn-sm btn-outline-primary me-2" @onclick="() => StartPositionPicker(action)" title="Pick position by clicking on screen">
                                                                                üìç Pick
                                                                            </button>
                                                                        }
                                                                        else if (action.Type == "type")
                                                                        {
                                                                            <input type="text" class="form-control form-control-sm me-2" 
                                                                                   placeholder="Text to type" @onchange="(e) => UpdateActionParameterText(action, e.Value)">
                                                                        }
                                                                        else if (action.Type == "key_press")
                                                                        {
                                                                            <input type="text" class="form-control form-control-sm me-2" 
                                                                                   placeholder="Keys (e.g., CTRL+C)" @onchange="(e) => UpdateActionParameterKeys(action, e.Value)">
                                                                        }
                                                                        else if (action.Type == "wait")
                                                                        {
                                                                            var waitValue = action.Parameters.ContainsKey("milliseconds") ? action.Parameters["milliseconds"] : 0;
                                                                            <input type="number" class="form-control form-control-sm me-2" style="width: 100px;"
                                                                                   value="@waitValue"
                                                                                   placeholder="ms" @oninput="(e) => UpdateActionParameterMs(action, e.Value)">
                                                                        }
                                                                        else if (action.Type == "screenshot")
                                                                        {
                                                                            <input type="text" class="form-control form-control-sm me-2" style="width: 200px;" 
                                                                                   placeholder="filename (optional)" 
                                                                                   value="@(action.Parameters.GetValueOrDefault("fileName")?.ToString() ?? "")"
                                                                                   @onchange="(e) => UpdateActionParameterFileName(action, e.Value)">
                                                                            <small class="text-muted me-2">üì∑ Screenshot will be saved to Screenshots folder</small>
                                                                        }
                                                                        
                                                                        <button class="btn btn-sm btn-outline-danger" @onclick="() => RemoveAction(step, action)">
                                                                            üóëÔ∏è
                                                                        </button>
                                                                    </div>
                                                                }
                                                            }
                                                            <div class="btn-group">
                                                                <button class="btn btn-sm btn-outline-primary" @onclick="() => AddAction(step)">
                                                                    ‚ûï Add Action
                                                                </button>
                                                                <button class="btn btn-sm btn-outline-primary dropdown-toggle dropdown-toggle-split" data-bs-toggle="dropdown">
                                                                    <span class="visually-hidden">Toggle Dropdown</span>
                                                                </button>
                                                                <ul class="dropdown-menu">
                                                                    <li><button class="dropdown-item" type="button" @onclick="() => AddClickAction(step)">üñ±Ô∏è Click</button></li>
                                                                    <li><button class="dropdown-item" type="button" @onclick="() => AddTypeAction(step)">‚å®Ô∏è Type Text</button></li>
                                                                    <li><button class="dropdown-item" type="button" @onclick="() => AddKeyPressAction(step)">üî† Key Press</button></li>
                                                                    <li><button class="dropdown-item" type="button" @onclick="() => AddWaitAction(step)">‚è±Ô∏è Wait</button></li>
                                                                    <li><hr class="dropdown-divider"></li>
                                                                    <li><button class="dropdown-item" type="button" @onclick="() => AddScreenshotAction(step)">üì∑ Take Screenshot</button></li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                }
                                            </div>
                                            
                                            <div class="col-md-4">
                                                <div class="d-flex justify-content-end align-items-start">
                                                    <div class="btn-group-vertical" role="group">
                                                        @if (stepIndex > 0)
                                                        {
                                                            <button class="btn btn-sm btn-outline-secondary" @onclick="() => MoveStepUp(stepIndex)">
                                                                ‚¨ÜÔ∏è
                                                            </button>
                                                        }
                                                        @if (stepIndex < selectedScript.Steps.Count - 1)
                                                        {
                                                            <button class="btn btn-sm btn-outline-secondary" @onclick="() => MoveStepDown(stepIndex)">
                                                                ‚¨áÔ∏è
                                                            </button>
                                                        }
                                                        <button class="btn btn-sm btn-outline-danger" @onclick="() => RemoveStep(stepIndex)">
                                                            üóëÔ∏è
                                                        </button>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        }
                        else
                        {
                            <div class="text-center py-4 border rounded bg-light">
                                <p class="text-muted mb-2">No steps added yet</p>
                                <button class="btn btn-sm btn-primary" @onclick="AddStep">
                                    Add First Step
                                </button>
                            </div>
                        }
                    </div>
                </div>
            </div>
        }
    </div>

    <div class="col-md-4">
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">Script Templates</h5>
                <p class="small text-muted">Quick start with pre-built script templates</p>
                
                <div class="d-grid gap-2">
                    <button class="btn btn-outline-primary btn-sm" @onclick="CreateClickWaitTemplate">
                        üñ±Ô∏è Click & Wait
                    </button>
                    <button class="btn btn-outline-primary btn-sm" @onclick="CreateImageSearchTemplate">
                        üéØ Image Search & Click
                    </button>
                    <button class="btn btn-outline-primary btn-sm" @onclick="CreateFormFillTemplate">
                        üìù Form Filling
                    </button>
                    <button class="btn btn-outline-primary btn-sm" @onclick="CreateAutomationLoopTemplate">
                        üîÑ Automation Loop
                    </button>
                    <button class="btn btn-outline-secondary btn-sm" @onclick="CreateDebugTemplate">
                        üêõ Debug with Screenshots
                    </button>
                </div>
            </div>
        </div>

        @if (selectedScript != null)
        {
            <div class="card mt-3">
                <div class="card-body">
                    <h5 class="card-title">Script Preview</h5>
                    <div class="small">
                        <strong>Name:</strong> @(string.IsNullOrEmpty(selectedScript.Name) ? "Untitled Script" : selectedScript.Name)<br>
                        <strong>Steps:</strong> @selectedScript.Steps.Count<br>
                        <strong>Actions:</strong> @selectedScript.Steps.SelectMany(s => s.Actions).Count()<br>
                        <strong>Repeats:</strong> @(selectedScript.IsInfiniteRepeat ? "‚ôæÔ∏è Infinite" : $"{selectedScript.RepeatCount}x")<br>
                        @if (selectedScript.DelayBetweenRepeats > 0)
                        {
                            <text><strong>Delay:</strong> @selectedScript.DelayBetweenRepeats ms<br></text>
                        }
                        <strong>Modified:</strong> @selectedScript.ModifiedAt.ToString("MM/dd/yyyy HH:mm")
                    </div>
                </div>
            </div>
        }

        @if (templateImages.Any())
        {
            <div class="card mt-3">
                <div class="card-body">
                    <h5 class="card-title">üì∏ Template Images</h5>
                    <p class="small text-muted">Available template images for image search conditions</p>
                    
                    <div class="template-images-list" style="max-height: 300px; overflow-y: auto;">
                        @foreach (var template in templateImages)
                        {
                            <div class="d-flex align-items-center mb-2 p-2 border rounded">
                                <div class="me-2">
                                    @if (template.ImageData != null)
                                    {
                                        <img src="data:image/png;base64,@Convert.ToBase64String(template.ImageData)" 
                                             style="width: 40px; height: 40px; object-fit: cover;" 
                                             alt="@template.Name" class="rounded" />
                                    }
                                    else
                                    {
                                        <div class="bg-light rounded d-flex align-items-center justify-content-center" 
                                             style="width: 40px; height: 40px;">
                                            üñºÔ∏è
                                        </div>
                                    }
                                </div>
                                <div class="flex-grow-1">
                                    <div class="fw-bold small">@template.Name</div>
                                    <div class="text-muted" style="font-size: 0.75rem;">
                                        @template.CaptureRegion.Width x @template.CaptureRegion.Height
                                    </div>
                                </div>
                                <button class="btn btn-sm btn-outline-primary" 
                                        @onclick="() => UseTemplateInNewStep(template)"
                                        title="Create step with this template">
                                    ‚ûï
                                </button>
                            </div>
                        }
                    </div>
                </div>
            </div>
        }

        @if (!string.IsNullOrEmpty(statusMessage))
        {
            <div class="alert @statusClass alert-dismissible fade show mt-3" role="alert">
                @statusMessage
                <button type="button" class="btn-close" @onclick="ClearStatus"></button>
            </div>
        }
    </div>
</div>

@* Image Selection Modal *@
@if (showImageSelectionModal)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">üîç Select Template Image</h5>
                    <button type="button" class="btn-close" @onclick="CloseImageSelectionModal"></button>
                </div>
                <div class="modal-body">
                    @if (templateImages.Any())
                    {
                        <div class="row">
                            @foreach (var template in templateImages)
                            {
                                <div class="col-md-4 mb-3">
                                    <div class="card h-100 @(selectedTemplateForScript?.Id == template.Id ? "border-primary" : "")" 
                                         style="cursor: pointer;" @onclick="() => SelectTemplateForScript(template)">
                                        <div class="card-body text-center">
                                            @if (template.ImageData != null)
                                            {
                                                <img src="data:image/png;base64,@Convert.ToBase64String(template.ImageData)" 
                                                     class="img-fluid mb-2 rounded" 
                                                     style="max-height: 100px; object-fit: contain;" 
                                                     alt="@template.Name" />
                                            }
                                            else
                                            {
                                                <div class="bg-light rounded d-flex align-items-center justify-content-center mb-2" 
                                                     style="height: 100px;">
                                                    <span style="font-size: 2rem;">üñºÔ∏è</span>
                                                </div>
                                            }
                                            <h6 class="card-title">@template.Name</h6>
                                            <small class="text-muted">@template.CaptureRegion.Width x @template.CaptureRegion.Height</small>
                                        </div>
                                        @if (selectedTemplateForScript?.Id == template.Id)
                                        {
                                            <div class="position-absolute top-0 end-0 m-2">
                                                <span class="badge bg-primary">‚úì Selected</span>
                                            </div>
                                        }
                                    </div>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-4">
                            <p class="text-muted">No template images available.</p>
                            <p class="small">Go to <strong>Screenshot</strong> page to capture and save template images first.</p>
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseImageSelectionModal">Cancel</button>
                    @if (selectedTemplateForScript != null)
                    {
                        <button type="button" class="btn btn-primary" @onclick="CreateScriptFromSelectedTemplate">
                            ‚ú® Create Script
                        </button>
                    }
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@* Capture Template Modal *@
@if (showCaptureTemplateModal && capturedTemplateData != null)
{
    <div class="modal fade show" style="display: block; z-index: 1070;" tabindex="-1">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">üì∏ Save Captured Template</h5>
                    <button type="button" class="btn-close" @onclick="CloseCaptureTemplateModal"></button>
                </div>
                <div class="modal-body">
                    <div class="text-center mb-3">
                        <img src="data:image/png;base64,@Convert.ToBase64String(capturedTemplateData)" 
                             class="img-fluid rounded border" 
                             style="max-height: 200px; background-color: #f8f9fa;" 
                             alt="Captured template preview">
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Template Name *</label>
                        <input type="text" class="form-control" @bind="newTemplateName" placeholder="Enter template name">
                        <small class="text-muted">Give this template a descriptive name</small>
                    </div>
                    <div class="card bg-light border-0">
                        <div class="card-body py-2">
                            <div class="row small">
                                <div class="col-6">
                                    <strong>Size:</strong> @capturedRegion.Width √ó @capturedRegion.Height
                                </div>
                                <div class="col-6">
                                    <strong>Position:</strong> (@capturedRegion.X, @capturedRegion.Y)
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseCaptureTemplateModal">Cancel</button>
                    <button type="button" class="btn btn-success" @onclick="SaveCapturedTemplate">
                        üíæ Save Template
                    </button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show" style="z-index: 1065;"></div>
}

@* Position Picker Modal *@
@if (showPositionPicker)
{
    <div class="modal fade show" style="display: block; z-index: 1060;" tabindex="-1">
        <div class="modal-dialog modal-sm">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">üìç Pick Screen Position</h5>
                    <button type="button" class="btn-close" @onclick="CancelPositionPicker"></button>
                </div>
                <div class="modal-body text-center">
                    <div class="mb-3">
                        <i class="bi bi-cursor-click" style="font-size: 3rem; color: #0d6efd;"></i>
                    </div>
                    <p class="mb-3">Click anywhere on your screen to select the position for this click action.</p>
                    <div class="d-grid gap-2">
                        <button class="btn btn-primary" @onclick="StartScreenPositionSelection">
                            üñ±Ô∏è Start Position Selection
                        </button>
                        <button class="btn btn-secondary" @onclick="CancelPositionPicker">
                            Cancel
                        </button>
                    </div>
                    @if (isSelectingPosition)
                    {
                        <div class="mt-3">
                            <div class="spinner-border spinner-border-sm text-primary" role="status">
                                <span class="visually-hidden">Selecting...</span>
                            </div>
                            <p class="mt-2 small text-muted">Click anywhere on screen to select position...</p>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show" style="z-index: 1055;"></div>
}

@code {
    private List<AutomationScript> scripts = new();
    private List<TemplateImage> templateImages = new();
    private AutomationScript? selectedScript;
    private bool isEditing = false;
    private bool isSaving = false;
    private string statusMessage = string.Empty;
    private string statusClass = string.Empty;
    private bool showPositionPicker = false;
    private bool isSelectingPosition = false;
    private ScriptAction? currentActionForPositionPick;
    private bool showImageSelectionModal = false;
    private TemplateImage? selectedTemplateForScript;
    private bool showCaptureTemplateModal = false;
    private string newTemplateName = string.Empty;
    private byte[]? capturedTemplateData;
    private System.Drawing.Rectangle capturedRegion;
    private ScriptCondition? currentConditionForTemplate;
    private IntPtr selectedWindowHandle;
    private string selectedWindowDescription = string.Empty;
    private bool _targetWindowEnabled;
    private bool isLoadingWindowState;
    private bool TargetWindowEnabled
    {
        get => _targetWindowEnabled;
        set
        {
            if (_targetWindowEnabled == value)
            {
                return;
            }

            _targetWindowEnabled = value;

            HandleTargetWindowToggle();
        }
    }

    private void HandleTargetWindowToggle()
    {
        ExecuteWithTargetWindowState(() =>
        {
            if (!_targetWindowEnabled)
            {
                selectedWindowHandle = IntPtr.Zero;
                selectedWindowDescription = string.Empty;
            }

            PersistWindowSelectionToScript();
        });
    }

    private void ExecuteWithTargetWindowState(Action action)
    {
        if (isLoadingWindowState)
        {
            return;
        }

        try
        {
            isLoadingWindowState = true;
            action();
        }
        finally
        {
            isLoadingWindowState = false;
        }
    }

    private void LoadWindowSelectionFromScript()
    {
        if (selectedScript == null)
        {
            return;
        }

        ExecuteWithTargetWindowState(() =>
        {
            TargetWindowEnabled = selectedScript.UseWindowTargeting;

            if (selectedScript.UseWindowTargeting && !string.IsNullOrEmpty(selectedScript.TargetWindowHandle) &&
                long.TryParse(selectedScript.TargetWindowHandle, out var handleValue))
            {
                selectedWindowHandle = new IntPtr(handleValue);
                selectedWindowDescription = selectedScript.TargetWindowDescription ?? string.Empty;
            }
            else
            {
                selectedWindowHandle = IntPtr.Zero;
                selectedWindowDescription = string.Empty;
            }
        });
    }

    private void PersistWindowSelectionToScript()
    {
        if (selectedScript == null)
        {
            return;
        }

        selectedScript.UseWindowTargeting = TargetWindowEnabled;
        selectedScript.TargetWindowHandle = TargetWindowEnabled && selectedWindowHandle != IntPtr.Zero
            ? selectedWindowHandle.ToInt64().ToString()
            : null;
        selectedScript.TargetWindowDescription = TargetWindowEnabled ? selectedWindowDescription : null;
    }

    private static AutomationScript CloneScript(AutomationScript script)
    {
        return new AutomationScript
        {
            Id = script.Id,
            Name = script.Name,
            Description = script.Description,
            CreatedAt = script.CreatedAt,
            ModifiedAt = script.ModifiedAt,
            Steps = script.Steps.Select(CloneStep).ToList(),
            IsInfiniteRepeat = script.IsInfiniteRepeat,
            RepeatCount = script.RepeatCount,
            DelayBetweenRepeats = script.DelayBetweenRepeats,
            UseWindowTargeting = script.UseWindowTargeting,
            TargetWindowHandle = script.TargetWindowHandle,
            TargetWindowDescription = script.TargetWindowDescription
        };
    }

    private static ScriptStep CloneStep(ScriptStep step)
    {
        return new ScriptStep
        {
            Id = step.Id,
            Order = step.Order,
            Type = step.Type,
            Name = step.Name,
            Parameters = new Dictionary<string, object>(step.Parameters),
            Conditions = step.Conditions.Select(CloneCondition).ToList(),
            Actions = step.Actions.Select(CloneAction).ToList(),
            ElseStepId = step.ElseStepId,
            IsEnabled = step.IsEnabled
        };
    }

    private static ScriptCondition CloneCondition(ScriptCondition condition)
    {
        return new ScriptCondition
        {
            Id = condition.Id,
            Type = condition.Type,
            Parameters = new Dictionary<string, object>(condition.Parameters),
            Operator = condition.Operator
        };
    }

    private static ScriptAction CloneAction(ScriptAction action)
    {
        return new ScriptAction
        {
            Id = action.Id,
            Type = action.Type,
            Parameters = new Dictionary<string, object>(action.Parameters),
            DelayAfter = action.DelayAfter
        };
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadScripts();
    }

    private async Task LoadScripts()
    {
        scripts = await ScriptStorage.GetAllScriptsAsync();
        templateImages = await ScriptStorage.GetAllTemplateImagesAsync();
        StateHasChanged();
    }

    private void CreateNewScript()
    {
        selectedScript = new AutomationScript
        {
            Name = "New Script",
            Description = "Enter script description",
            Steps = new List<ScriptStep>(),
            RepeatCount = 1,
            IsInfiniteRepeat = false,
            DelayBetweenRepeats = 0,
            UseWindowTargeting = false,
            TargetWindowHandle = null,
            TargetWindowDescription = null
        };
        isEditing = false;
        TargetWindowEnabled = false;
        selectedWindowHandle = IntPtr.Zero;
        selectedWindowDescription = string.Empty;
    }

    private void EditScript(AutomationScript script)
    {
        selectedScript = CloneScript(script);
        isEditing = true;
        LoadWindowSelectionFromScript();
    }

    private void CancelEdit()
    {
        selectedScript = null;
        isEditing = false;
        ClearStatus();
    }

    private async Task SaveScript()
    {
        if (selectedScript == null || string.IsNullOrWhiteSpace(selectedScript.Name))
        {
            ShowStatus("Please enter a script name.", "alert-warning");
            return;
        }

        try
        {
            isSaving = true;
            ClearStatus();

            // Update step orders
            for (int i = 0; i < selectedScript.Steps.Count; i++)
            {
                selectedScript.Steps[i].Order = i + 1;
            }

            PersistWindowSelectionToScript();

            selectedScript.ModifiedAt = DateTime.Now;
            await ScriptStorage.SaveScriptAsync(selectedScript);
            await LoadScripts();
            
            ShowStatus($"Script '{selectedScript.Name}' saved successfully!", "alert-success");
            selectedScript = null;
            isEditing = false;
        }
        catch (Exception ex)
        {
            ShowStatus($"Error saving script: {ex.Message}", "alert-danger");
        }
        finally
        {
            isSaving = false;
        }
    }

    private async Task DeleteScript(string scriptId)
    {
        try
        {
            await ScriptStorage.DeleteScriptAsync(scriptId);
            await LoadScripts();
            ShowStatus("Script deleted successfully!", "alert-success");
        }
        catch (Exception ex)
        {
            ShowStatus($"Error deleting script: {ex.Message}", "alert-danger");
        }
    }

    private async Task RunScript(string scriptId)
    {
        try
        {
            await ScriptExecution.StartScriptAsync(scriptId);
            ShowStatus("Script execution started!", "alert-success");
            Navigation.NavigateTo("/execution");
        }
        catch (Exception ex)
        {
            ShowStatus($"Error starting script: {ex.Message}", "alert-danger");
        }
    }

    private void AddStep()
    {
        if (selectedScript == null) return;

        var newStep = new ScriptStep
        {
            Name = $"Step {selectedScript.Steps.Count + 1}",
            Type = "action",
            Order = selectedScript.Steps.Count + 1,
            Actions = new List<ScriptAction>()
        };

        selectedScript.Steps.Add(newStep);
    }

    private void RemoveStep(int index)
    {
        if (selectedScript?.Steps != null && index >= 0 && index < selectedScript.Steps.Count)
        {
            selectedScript.Steps.RemoveAt(index);
        }
    }

    private void MoveStepUp(int index)
    {
        if (selectedScript?.Steps != null && index > 0)
        {
            var step = selectedScript.Steps[index];
            selectedScript.Steps.RemoveAt(index);
            selectedScript.Steps.Insert(index - 1, step);
        }
    }

    private void MoveStepDown(int index)
    {
        if (selectedScript?.Steps != null && index < selectedScript.Steps.Count - 1)
        {
            var step = selectedScript.Steps[index];
            selectedScript.Steps.RemoveAt(index);
            selectedScript.Steps.Insert(index + 1, step);
        }
    }

    private void AddAction(ScriptStep step)
    {
        var newAction = new ScriptAction
        {
            Type = "click",
            Parameters = new Dictionary<string, object>()
        };
        
        step.Actions ??= new List<ScriptAction>();
        step.Actions.Add(newAction);
    }

    private void AddActionOfType(ScriptStep step, string actionType)
    {
        var newAction = new ScriptAction
        {
            Type = actionType,
            Parameters = new Dictionary<string, object>()
        };

        // Set default parameters based on action type
        switch (actionType)
        {
            case "click":
            case "double_click":
            case "right_click":
                newAction.Parameters["x"] = 0;
                newAction.Parameters["y"] = 0;
                break;
            case "type":
                newAction.Parameters["text"] = "";
                break;
            case "key_press":
                newAction.Parameters["keys"] = "";
                break;
            case "wait":
                newAction.Parameters["milliseconds"] = 1000;
                break;
            case "screenshot":
                newAction.Parameters["fileName"] = $"step_screenshot_{DateTime.Now:yyyyMMdd_HHmmss}";
                break;
        }
        
        step.Actions ??= new List<ScriptAction>();
        step.Actions.Add(newAction);
        StateHasChanged();
    }

    private void AddClickAction(ScriptStep step)
    {
        AddActionOfType(step, "click");
    }

    private void AddTypeAction(ScriptStep step)
    {
        AddActionOfType(step, "type");
    }

    private void AddKeyPressAction(ScriptStep step)
    {
        AddActionOfType(step, "key_press");
    }

    private void AddWaitAction(ScriptStep step)
    {
        AddActionOfType(step, "wait");
    }

    private void AddScreenshotAction(ScriptStep step)
    {
        AddActionOfType(step, "screenshot");
    }

    private void RemoveAction(ScriptStep step, ScriptAction action)
    {
        step.Actions?.Remove(action);
    }

    private void UpdateActionParameter(ScriptAction action, string key, object? value)
    {
        if (value != null)
        {
            action.Parameters[key] = value;
        }
    }

    private void UpdateActionParameterX(ScriptAction action, object? value)
    {
        UpdateActionParameter(action, "x", value);
    }

    private void UpdateActionParameterY(ScriptAction action, object? value)
    {
        UpdateActionParameter(action, "y", value);
    }

    private void UpdateActionParameterText(ScriptAction action, object? value)
    {
        UpdateActionParameter(action, "text", value);
    }

    private void UpdateActionParameterKeys(ScriptAction action, object? value)
    {
        UpdateActionParameter(action, "keys", value);
    }

    private void UpdateActionParameterMs(ScriptAction action, object? value)
    {
        if (value == null) return;

        if (value is int intValue)
        {
            UpdateActionParameter(action, "milliseconds", intValue);
            return;
        }

        if (int.TryParse(value.ToString(), out var parsed))
        {
            UpdateActionParameter(action, "milliseconds", parsed);
        }
    }

    private void UpdateActionParameterFileName(ScriptAction action, object? value)
    {
        UpdateActionParameter(action, "fileName", value);
    }

    private void CreateFromTemplate(string templateType)
    {
        selectedScript = CreateScriptTemplate(templateType);
        isEditing = false;
    }

    private void CreateClickWaitTemplate()
    {
        CreateFromTemplate("click-wait");
    }

    private void CreateImageSearchTemplate()
    {
        if (templateImages.Any())
        {
            showImageSelectionModal = true;
            selectedTemplateForScript = null;
            StateHasChanged();
        }
        else
        {
            ShowStatus("No template images available. Please capture some images first using the Screenshot page.", "alert-warning");
        }
    }

    private void CreateFormFillTemplate()
    {
        CreateFromTemplate("form-fill");
    }

    private void CreateAutomationLoopTemplate()
    {
        CreateFromTemplate("automation-loop");
    }

    private void CreateDebugTemplate()
    {
        CreateFromTemplate("debug-with-screenshots");
    }

    // Quick helper to add a click action at specific coordinates
    private void AddClickAction(ScriptStep step, int x, int y, string actionName = "Click")
    {
        var clickAction = new ScriptAction
        {
            Type = "click",
            Parameters = new Dictionary<string, object>
            {
                {"x", x},
                {"y", y}
            }
        };
        
        step.Actions ??= new List<ScriptAction>();
        step.Actions.Add(clickAction);
    }

    private AutomationScript CreateScriptTemplate(string templateType)
    {
        return templateType switch
        {
            "click-wait" => new AutomationScript
            {
                Name = "Click & Wait Template",
                Description = "Click at a position and wait",
                Steps = new List<ScriptStep>
                {
                    new ScriptStep
                    {
                        Name = "Click at position",
                        Type = "action",
                        Order = 1,
                        Actions = new List<ScriptAction>
                        {
                            new ScriptAction
                            {
                                Type = "click",
                                Parameters = new Dictionary<string, object> { {"x", 500}, {"y", 300} }
                            }
                        }
                    },
                    new ScriptStep
                    {
                        Name = "Wait 2 seconds",
                        Type = "action",
                        Order = 2,
                        Actions = new List<ScriptAction>
                        {
                            new ScriptAction
                            {
                                Type = "wait",
                                Parameters = new Dictionary<string, object> { {"milliseconds", 2000} }
                            }
                        }
                    }
                }
            },
            "image-search" => new AutomationScript
            {
                Name = "Image Search Template",
                Description = "Search for an image and click on it",
                Steps = new List<ScriptStep>
                {
                    new ScriptStep
                    {
                        Name = "Search for image",
                        Type = "condition",
                        Order = 1,
                        Conditions = new List<ScriptCondition>
                        {
                            new ScriptCondition
                            {
                                Type = "image_found",
                                Parameters = new Dictionary<string, object>
                                {
                                    {"templateImageId", ""},
                                    {"threshold", 0.8}
                                }
                            }
                        },
                        Actions = new List<ScriptAction>
                        {
                            new ScriptAction
                            {
                                Type = "click",
                                Parameters = new Dictionary<string, object> { {"x", 0}, {"y", 0} }
                            }
                        }
                    }
                }
            },
            "form-fill" => new AutomationScript
            {
                Name = "Form Filling Template",
                Description = "Fill out a form with multiple fields",
                Steps = new List<ScriptStep>
                {
                    new ScriptStep
                    {
                        Name = "Click first field",
                        Type = "action",
                        Order = 1,
                        Actions = new List<ScriptAction>
                        {
                            new ScriptAction
                            {
                                Type = "click",
                                Parameters = new Dictionary<string, object> { {"x", 300}, {"y", 200} }
                            }
                        }
                    },
                    new ScriptStep
                    {
                        Name = "Type in first field",
                        Type = "action",
                        Order = 2,
                        Actions = new List<ScriptAction>
                        {
                            new ScriptAction
                            {
                                Type = "type",
                                Parameters = new Dictionary<string, object> { {"text", "Enter your text here"} }
                            }
                        }
                    },
                    new ScriptStep
                    {
                        Name = "Tab to next field",
                        Type = "action",
                        Order = 3,
                        Actions = new List<ScriptAction>
                        {
                            new ScriptAction
                            {
                                Type = "key_press",
                                Parameters = new Dictionary<string, object> { {"keys", "TAB"} }
                            }
                        }
                    }
                }
            },
            "automation-loop" => new AutomationScript
            {
                Name = "Automation Loop Template",
                Description = "Repeating automation with image detection",
                Steps = new List<ScriptStep>
                {
                    new ScriptStep
                    {
                        Name = "Wait for target image",
                        Type = "condition",
                        Order = 1,
                        Conditions = new List<ScriptCondition>
                        {
                            new ScriptCondition
                            {
                                Type = "image_found",
                                Parameters = new Dictionary<string, object>
                                {
                                    {"templateImageId", ""},
                                    {"threshold", 0.8}
                                }
                            }
                        },
                        Actions = new List<ScriptAction>
                        {
                            new ScriptAction
                            {
                                Type = "click",
                                Parameters = new Dictionary<string, object> { {"x", 0}, {"y", 0} }
                            }
                        }
                    },
                    new ScriptStep
                    {
                        Name = "Wait and repeat",
                        Type = "action",
                        Order = 2,
                        Actions = new List<ScriptAction>
                        {
                            new ScriptAction
                            {
                                Type = "wait",
                                Parameters = new Dictionary<string, object> { {"milliseconds", 1000} }
                            }
                        }
                    }
                }
            },
            "debug-with-screenshots" => new AutomationScript
            {
                Name = "Debug Template with Screenshots",
                Description = "Template for debugging automation with screenshots at each step",
                Steps = new List<ScriptStep>
                {
                    new ScriptStep
                    {
                        Name = "Take initial screenshot",
                        Type = "action",
                        Order = 1,
                        Actions = new List<ScriptAction>
                        {
                            new ScriptAction
                            {
                                Type = "screenshot",
                                Parameters = new Dictionary<string, object> { {"fileName", "debug_step_1_initial"} }
                            }
                        }
                    },
                    new ScriptStep
                    {
                        Name = "Perform action and capture result",
                        Type = "action",
                        Order = 2,
                        Actions = new List<ScriptAction>
                        {
                            new ScriptAction
                            {
                                Type = "click",
                                Parameters = new Dictionary<string, object> { {"x", 100}, {"y", 100} }
                            },
                            new ScriptAction
                            {
                                Type = "wait",
                                Parameters = new Dictionary<string, object> { {"milliseconds", 1000} }
                            },
                            new ScriptAction
                            {
                                Type = "screenshot",
                                Parameters = new Dictionary<string, object> { {"fileName", "debug_step_2_after_click"} }
                            }
                        }
                    },
                    new ScriptStep
                    {
                        Name = "Final verification screenshot",
                        Type = "action",
                        Order = 3,
                        Actions = new List<ScriptAction>
                        {
                            new ScriptAction
                            {
                                Type = "screenshot",
                                Parameters = new Dictionary<string, object> { {"fileName", "debug_step_3_final"} }
                            }
                        }
                    }
                }
            },
            _ => new AutomationScript
            {
                Name = "Custom Script",
                Description = "Custom automation script",
                Steps = new List<ScriptStep>()
            }
        };
    }

    private void ShowStatus(string message, string cssClass)
    {
        statusMessage = message;
        statusClass = cssClass;
        StateHasChanged();
    }

    private void ClearStatus()
    {
        statusMessage = string.Empty;
        statusClass = string.Empty;
    }

    private void StartPositionPicker(ScriptAction action)
    {
        currentActionForPositionPick = action;
        showPositionPicker = true;
        isSelectingPosition = false;
        StateHasChanged();
    }

    private void CancelPositionPicker()
    {
        showPositionPicker = false;
        isSelectingPosition = false;
        currentActionForPositionPick = null;
        StateHasChanged();
    }

    private async Task StartScreenPositionSelection()
    {
        if (currentActionForPositionPick == null) return;

        try
        {
            isSelectingPosition = true;
            StateHasChanged();

            // Use the desktop region selector to pick a single point
            var selectedRegion = await ScreenshotService.SelectDesktopRegionAsync();

            if (selectedRegion.HasValue)
            {
                var region = selectedRegion.Value;
                // Use the center of the selected region as the click point
                var centerX = region.X + region.Width / 2;
                var centerY = region.Y + region.Height / 2;

                // Update the action parameters
                currentActionForPositionPick.Parameters["x"] = centerX;
                currentActionForPositionPick.Parameters["y"] = centerY;

                ShowStatus($"Position selected: ({centerX}, {centerY})", "alert-success");
                
                // Close the modal
                CancelPositionPicker();
            }
            else
            {
                ShowStatus("Position selection cancelled", "alert-info");
            }
        }
        catch (Exception ex)
        {
            _logger?.LogError(ex, "Error during position selection");
            ShowStatus($"Error selecting position: {ex.Message}", "alert-danger");
        }
        finally
        {
            isSelectingPosition = false;
            StateHasChanged();
        }
    }

    private void UseTemplateInNewStep(TemplateImage template)
    {
        if (selectedScript == null)
        {
            CreateNewScript();
        }

        if (selectedScript != null)
        {
            var newStep = new ScriptStep
            {
                Name = $"Find and click {template.Name}",
                Type = "condition",
                Order = selectedScript.Steps.Count + 1,
                Conditions = new List<ScriptCondition>
                {
                    new ScriptCondition
                    {
                        Type = "image_found",
                        Parameters = new Dictionary<string, object>
                        {
                            {"templateImageId", template.Id},
                            {"threshold", template.MatchThreshold}
                        }
                    }
                },
                Actions = new List<ScriptAction>
                {
                    new ScriptAction
                    {
                        Type = "click",
                        Parameters = new Dictionary<string, object>
                        {
                            {"x", template.CaptureRegion.X + template.CaptureRegion.Width / 2},
                            {"y", template.CaptureRegion.Y + template.CaptureRegion.Height / 2}
                        }
                    }
                }
            };

            selectedScript.Steps.Add(newStep);
            isEditing = true;
            ShowStatus($"Added step using template '{template.Name}'", "alert-success");
            StateHasChanged();
        }
    }

    private void CloseImageSelectionModal()
    {
        showImageSelectionModal = false;
        selectedTemplateForScript = null;
        StateHasChanged();
    }

    private void SelectTemplateForScript(TemplateImage template)
    {
        selectedTemplateForScript = template;
        StateHasChanged();
    }

    private void CreateScriptFromSelectedTemplate()
    {
        if (selectedTemplateForScript == null) return;

        var template = selectedTemplateForScript;
        
        // Create a new script with the selected template
        var newScript = new AutomationScript
        {
            Name = $"Find and Click - {template.Name}",
            Description = $"Automatically generated script to find and click '{template.Name}' when it appears on screen",
            Steps = new List<ScriptStep>
            {
                new ScriptStep
                {
                    Name = $"Find and click {template.Name}",
                    Type = "condition",
                    Order = 1,
                    Conditions = new List<ScriptCondition>
                    {
                        new ScriptCondition
                        {
                            Type = "image_found",
                            Parameters = new Dictionary<string, object>
                            {
                                {"templateImageId", template.Id},
                                {"threshold", template.MatchThreshold}
                            }
                        }
                    },
                    Actions = new List<ScriptAction>
                    {
                        new ScriptAction
                        {
                            Type = "click",
                            Parameters = new Dictionary<string, object>
                            {
                                {"x", template.CaptureRegion.X + template.CaptureRegion.Width / 2},
                                {"y", template.CaptureRegion.Y + template.CaptureRegion.Height / 2}
                            }
                        }
                    }
                }
            }
        };

        // Set as the selected script and enable editing
        selectedScript = newScript;
        isEditing = true;
        
        // Close the modal
        CloseImageSelectionModal();
        
        ShowStatus($"Created new script using template '{template.Name}'. You can now edit and save it.", "alert-success");
        StateHasChanged();
    }

    private void AddCondition(ScriptStep step)
    {
        step.Conditions ??= new List<ScriptCondition>();

        var newCondition = new ScriptCondition
        {
            Type = "always",
            Operator = "AND",
            Parameters = new Dictionary<string, object>()
        };

        switch (newCondition.Type)
        {
            case "image_found":
            case "image_not_found":
                newCondition.Parameters["templateImageId"] = string.Empty;
                newCondition.Parameters["threshold"] = 0.8;
                break;
            case "timeout":
                newCondition.Parameters["milliseconds"] = 5000;
                break;
            case "variable_equals":
            case "variable_not_equals":
                newCondition.Parameters["variable"] = string.Empty;
                newCondition.Parameters["value"] = string.Empty;
                break;
        }

        step.Conditions.Add(newCondition);
    }

    private void RemoveCondition(ScriptStep step, ScriptCondition condition)
    {
        step.Conditions?.Remove(condition);
    }

    private RenderFragment RenderConditionParameters(ScriptStep step, ScriptCondition condition) => builder =>
    {
        int seq = 0;
        var type = condition.Type?.ToLower() ?? "";

        switch (type)
        {
            case "image_found":
            case "image_not_found":
                builder.OpenElement(seq++, "div");
                builder.AddAttribute(seq++, "class", "input-group input-group-sm mb-1");
                builder.OpenElement(seq++, "span");
                builder.AddAttribute(seq++, "class", "input-group-text");
                builder.AddContent(seq++, "Template");
                builder.CloseElement();
                builder.OpenElement(seq++, "select");
                builder.AddAttribute(seq++, "class", "form-select form-select-sm");
                builder.AddAttribute(seq++, "value", condition.Parameters.GetValueOrDefault("templateImageId")?.ToString() ?? string.Empty);
                builder.AddAttribute(seq++, "onchange", EventCallback.Factory.Create<ChangeEventArgs>(this, e => UpdateConditionParameter(step, condition, "templateImageId", e.Value)));
                builder.OpenElement(seq++, "option");
                builder.AddAttribute(seq++, "value", string.Empty);
                builder.AddContent(seq++, "-- Select Template --");
                builder.CloseElement();
                foreach (var template in templateImages)
                {
                    builder.OpenElement(seq++, "option");
                    builder.AddAttribute(seq++, "value", template.Id);
                    builder.AddContent(seq++, template.Name);
                    builder.CloseElement();
                }
                builder.CloseElement();
                builder.OpenElement(seq++, "button");
                builder.AddAttribute(seq++, "type", "button");
                builder.AddAttribute(seq++, "class", "btn btn-outline-success btn-sm");
                builder.AddAttribute(seq++, "onclick", EventCallback.Factory.Create(this, () => StartCaptureTemplate(condition)));
                builder.AddAttribute(seq++, "title", "Capture new template from screen");
                builder.AddContent(seq++, "üì∏");
                builder.CloseElement();
                builder.CloseElement();
                
                builder.OpenElement(seq++, "div");
                builder.AddAttribute(seq++, "class", "input-group input-group-sm mb-1");
                builder.OpenElement(seq++, "span");
                builder.AddAttribute(seq++, "class", "input-group-text");
                builder.AddContent(seq++, "Threshold");
                builder.CloseElement();
                builder.OpenElement(seq++, "input");
                builder.AddAttribute(seq++, "type", "number");
                builder.AddAttribute(seq++, "step", "0.01");
                builder.AddAttribute(seq++, "min", "0");
                builder.AddAttribute(seq++, "max", "1");
                builder.AddAttribute(seq++, "class", "form-control form-control-sm");
                builder.AddAttribute(seq++, "value", condition.Parameters.GetValueOrDefault("threshold")?.ToString() ?? "0.8");
                builder.AddAttribute(seq++, "onchange", EventCallback.Factory.Create<ChangeEventArgs>(this, e => UpdateConditionParameter(step, condition, "threshold", e.Value)));
                builder.CloseElement();
                builder.CloseElement();
                break;
            case "timeout":
                builder.OpenElement(seq++, "div");
                builder.AddAttribute(seq++, "class", "input-group input-group-sm mb-1");
                builder.OpenElement(seq++, "span");
                builder.AddAttribute(seq++, "class", "input-group-text");
                builder.AddContent(seq++, "Timeout (ms)");
                builder.CloseElement();
                builder.OpenElement(seq++, "input");
                builder.AddAttribute(seq++, "type", "number");
                builder.AddAttribute(seq++, "class", "form-control form-control-sm");
                builder.AddAttribute(seq++, "value", condition.Parameters.GetValueOrDefault("timeoutMs")?.ToString() ?? "5000");
                builder.AddAttribute(seq++, "onchange", EventCallback.Factory.Create<ChangeEventArgs>(this, e => UpdateConditionParameter(step, condition, "timeoutMs", e.Value)));
                builder.CloseElement();
                builder.CloseElement();
                break;
            case "variable_equals":
            case "variable_not_equals":
                builder.OpenElement(seq++, "div");
                builder.AddAttribute(seq++, "class", "row g-1");
                builder.OpenElement(seq++, "div");
                builder.AddAttribute(seq++, "class", "col-6");
                builder.OpenElement(seq++, "input");
                builder.AddAttribute(seq++, "type", "text");
                builder.AddAttribute(seq++, "placeholder", "Variable name");
                builder.AddAttribute(seq++, "class", "form-control form-control-sm");
                builder.AddAttribute(seq++, "value", condition.Parameters.GetValueOrDefault("variable")?.ToString() ?? string.Empty);
                builder.AddAttribute(seq++, "onchange", EventCallback.Factory.Create<ChangeEventArgs>(this, e => UpdateConditionParameter(step, condition, "variable", e.Value)));
                builder.CloseElement();
                builder.CloseElement();
                builder.OpenElement(seq++, "div");
                builder.AddAttribute(seq++, "class", "col-6");
                builder.OpenElement(seq++, "input");
                builder.AddAttribute(seq++, "type", "text");
                builder.AddAttribute(seq++, "placeholder", "Expected value");
                builder.AddAttribute(seq++, "class", "form-control form-control-sm");
                builder.AddAttribute(seq++, "value", condition.Parameters.GetValueOrDefault("value")?.ToString() ?? string.Empty);
                builder.AddAttribute(seq++, "onchange", EventCallback.Factory.Create<ChangeEventArgs>(this, e => UpdateConditionParameter(step, condition, "value", e.Value)));
                builder.CloseElement();
                builder.CloseElement();
                builder.CloseElement();
                break;
            default:
                builder.OpenElement(seq++, "div");
                builder.AddAttribute(seq++, "class", "text-muted small");
                builder.AddContent(seq++, "No parameters required for this condition type.");
                builder.CloseElement();
                break;
        }
    };

    private void UpdateConditionParameter(ScriptStep step, ScriptCondition condition, string key, object? value)
    {
        if (value == null) return;

        condition.Parameters ??= new Dictionary<string, object>();

        if (value is ChangeEventArgs changeEvent)
        {
            value = changeEvent.Value;
        }

        if (value is string strValue && double.TryParse(strValue, out var doubleValue) && key == "threshold")
        {
            condition.Parameters[key] = doubleValue;
        }
        else if (value is string strVal && int.TryParse(strVal, out var intValue) && (key == "milliseconds" || key == "timeoutMs"))
        {
            condition.Parameters[key] = intValue;
        }
        else
        {
            condition.Parameters[key] = value ?? string.Empty;
        }
    }

    private void OnConditionTypeChanged(ScriptStep step, ScriptCondition condition, string newType)
    {
        if (condition.Type == newType) return;

        condition.Type = newType;
        condition.Parameters = new Dictionary<string, object>();

        switch (newType)
        {
            case "image_found":
            case "image_not_found":
                condition.Parameters["templateImageId"] = string.Empty;
                condition.Parameters["threshold"] = 0.8;
                break;
            case "timeout":
                condition.Parameters["timeoutMs"] = 5000;
                break;
            case "variable_equals":
            case "variable_not_equals":
                condition.Parameters["variable"] = string.Empty;
                condition.Parameters["value"] = string.Empty;
                break;
        }
    }

    private RenderFragment RenderConditionSuccessActions(ScriptStep step) => builder =>
    {
        step.Actions ??= new List<ScriptAction>();
        int seq = 0;
        if (!step.Actions.Any())
        {
            builder.OpenElement(seq++, "div");
            builder.AddAttribute(seq++, "class", "alert alert-light py-2 mb-2");
            builder.AddAttribute(seq++, "role", "alert");
            builder.AddContent(seq++, (RenderFragment)(builder2 =>
            {
                int innerSeq = 0;
                builder2.AddContent(innerSeq++, "No actions configured yet.");
            }));
            builder.CloseElement();
        }
        else
        {
            foreach (var action in step.Actions)
            {
                builder.OpenElement(seq++, "div");
                builder.AddAttribute(seq++, "class", "mb-2");
                builder.AddContent(seq++, (RenderFragment)(builder2 =>
                {
                    int innerSeq = 0;
                    builder2.OpenElement(innerSeq++, "div");
                    builder2.AddAttribute(innerSeq++, "class", "d-flex align-items-center gap-2");
                    builder2.OpenElement(innerSeq++, "select");
                    builder2.AddAttribute(innerSeq++, "class", "form-select form-select-sm");
                    builder2.AddAttribute(innerSeq++, "style", "width: auto;");
                    builder2.AddAttribute(innerSeq++, "value", action.Type);
                    builder2.AddAttribute(innerSeq++, "onchange", EventCallback.Factory.Create<ChangeEventArgs>(this, e => UpdateActionType(step, action, e.Value?.ToString() ?? "")));
                    builder2.OpenElement(innerSeq++, "option");
                    builder2.AddAttribute(innerSeq++, "value", "click");
                    builder2.AddContent(innerSeq++, "Click");
                    builder2.CloseElement();
                    builder2.OpenElement(innerSeq++, "option");
                    builder2.AddAttribute(innerSeq++, "value", "double_click");
                    builder2.AddContent(innerSeq++, "Double Click");
                    builder2.CloseElement();
                    builder2.OpenElement(innerSeq++, "option");
                    builder2.AddAttribute(innerSeq++, "value", "right_click");
                    builder2.AddContent(innerSeq++, "Right Click");
                    builder2.CloseElement();
                    builder2.OpenElement(innerSeq++, "option");
                    builder2.AddAttribute(innerSeq++, "value", "type");
                    builder2.AddContent(innerSeq++, "Type Text");
                    builder2.CloseElement();
                    builder2.OpenElement(innerSeq++, "option");
                    builder2.AddAttribute(innerSeq++, "value", "key_press");
                    builder2.AddContent(innerSeq++, "Key Press");
                    builder2.CloseElement();
                    builder2.OpenElement(innerSeq++, "option");
                    builder2.AddAttribute(innerSeq++, "value", "wait");
                    builder2.AddContent(innerSeq++, "Wait");
                    builder2.CloseElement();
                    builder2.OpenElement(innerSeq++, "option");
                    builder2.AddAttribute(innerSeq++, "value", "screenshot");
                    builder2.AddContent(innerSeq++, "Screenshot");
                    builder2.CloseElement();
                    builder2.CloseElement();
                    builder2.AddContent(innerSeq++, RenderActionParameters(step, action));
                    builder2.OpenElement(innerSeq++, "button");
                    builder2.AddAttribute(innerSeq++, "type", "button");
                    builder2.AddAttribute(innerSeq++, "class", "btn btn-sm btn-outline-danger");
                    builder2.AddAttribute(innerSeq++, "onclick", EventCallback.Factory.Create(this, () => RemoveAction(step, action)));
                    builder2.AddContent(innerSeq++, "üóëÔ∏è");
                    builder2.CloseElement();
                    builder2.CloseElement();
                }));
                builder.CloseElement();
            }
        }

        builder.OpenElement(seq++, "button");
        builder.AddAttribute(seq++, "type", "button");
        builder.AddAttribute(seq++, "class", "btn btn-sm btn-outline-primary");
        builder.AddAttribute(seq++, "onclick", EventCallback.Factory.Create(this, () => AddAction(step)));
        builder.AddContent(seq++, "‚ûï Add Success Action");
        builder.CloseElement();
    };

    private void UpdateActionType(ScriptStep step, ScriptAction action, string newType)
    {
        if (action.Type == newType) return;

        action.Type = newType;
        action.Parameters = new Dictionary<string, object>();

        switch (newType)
        {
            case "click":
            case "double_click":
            case "right_click":
                action.Parameters["x"] = 0;
                action.Parameters["y"] = 0;
                break;
            case "type":
                action.Parameters["text"] = string.Empty;
                break;
            case "key_press":
                action.Parameters["keys"] = string.Empty;
                break;
            case "wait":
                action.Parameters["milliseconds"] = 1000;
                break;
            case "screenshot":
                action.Parameters["fileName"] = $"condition_action_{DateTime.Now:yyyyMMdd_HHmmss}";
                break;
        }
    }

    private RenderFragment RenderActionParameters(ScriptStep step, ScriptAction action) => builder =>
    {
        int seq = 0;
        var type = action.Type?.ToLower() ?? string.Empty;

        switch (type)
        {
            case "click":
            case "double_click":
            case "right_click":
                builder.OpenElement(seq++, "input");
                builder.AddAttribute(seq++, "type", "number");
                builder.AddAttribute(seq++, "placeholder", "X");
                builder.AddAttribute(seq++, "class", "form-control form-control-sm");
                builder.AddAttribute(seq++, "style", "width: 80px;");
                builder.AddAttribute(seq++, "value", action.Parameters.GetValueOrDefault("x")?.ToString() ?? string.Empty);
                builder.AddAttribute(seq++, "onchange", EventCallback.Factory.Create<ChangeEventArgs>(this, e => UpdateActionParameter(action, "x", e.Value)));
                builder.CloseElement();
                builder.OpenElement(seq++, "input");
                builder.AddAttribute(seq++, "type", "number");
                builder.AddAttribute(seq++, "placeholder", "Y");
                builder.AddAttribute(seq++, "class", "form-control form-control-sm");
                builder.AddAttribute(seq++, "style", "width: 80px;");
                builder.AddAttribute(seq++, "value", action.Parameters.GetValueOrDefault("y")?.ToString() ?? string.Empty);
                builder.AddAttribute(seq++, "onchange", EventCallback.Factory.Create<ChangeEventArgs>(this, e => UpdateActionParameter(action, "y", e.Value)));
                builder.CloseElement();

                builder.OpenElement(seq++, "button");
                builder.AddAttribute(seq++, "type", "button");
                builder.AddAttribute(seq++, "class", "btn btn-sm btn-outline-primary");
                builder.AddAttribute(seq++, "onclick", EventCallback.Factory.Create(this, () => StartPositionPicker(action)));
                builder.AddContent(seq++, "üìç Pick");
                builder.CloseElement();
                break;
            case "type":
                builder.OpenElement(seq++, "input");
                builder.AddAttribute(seq++, "type", "text");
                builder.AddAttribute(seq++, "placeholder", "Text to type");
                builder.AddAttribute(seq++, "class", "form-control form-control-sm");
                builder.AddAttribute(seq++, "value", action.Parameters.GetValueOrDefault("text")?.ToString() ?? string.Empty);
                builder.AddAttribute(seq++, "onchange", EventCallback.Factory.Create<ChangeEventArgs>(this, e => UpdateActionParameter(action, "text", e.Value)));
                builder.CloseElement();
                break;
            case "key_press":
                builder.OpenElement(seq++, "input");
                builder.AddAttribute(seq++, "type", "text");
                builder.AddAttribute(seq++, "placeholder", "Keys (e.g., CTRL+C)");
                builder.AddAttribute(seq++, "class", "form-control form-control-sm");
                builder.AddAttribute(seq++, "value", action.Parameters.GetValueOrDefault("keys")?.ToString() ?? string.Empty);
                builder.AddAttribute(seq++, "onchange", EventCallback.Factory.Create<ChangeEventArgs>(this, e => UpdateActionParameter(action, "keys", e.Value)));
                builder.CloseElement();
                break;
            case "wait":
                builder.OpenElement(seq++, "input");
                builder.AddAttribute(seq++, "type", "number");
                builder.AddAttribute(seq++, "placeholder", "Milliseconds");
                builder.AddAttribute(seq++, "class", "form-control form-control-sm");
                builder.AddAttribute(seq++, "style", "width: 120px;");
                builder.AddAttribute(seq++, "value", action.Parameters.GetValueOrDefault("milliseconds")?.ToString() ?? "1000");
                builder.AddAttribute(seq++, "onchange", EventCallback.Factory.Create<ChangeEventArgs>(this, e => UpdateActionParameter(action, "milliseconds", e.Value)));
                builder.CloseElement();
                break;
            case "screenshot":
                builder.OpenElement(seq++, "input");
                builder.AddAttribute(seq++, "type", "text");
                builder.AddAttribute(seq++, "placeholder", "Filename (optional)");
                builder.AddAttribute(seq++, "class", "form-control form-control-sm");
                builder.AddAttribute(seq++, "value", action.Parameters.GetValueOrDefault("fileName")?.ToString() ?? string.Empty);
                builder.AddAttribute(seq++, "onchange", EventCallback.Factory.Create<ChangeEventArgs>(this, e => UpdateActionParameter(action, "fileName", e.Value)));
                builder.CloseElement();
                break;
            default:
                builder.OpenElement(seq++, "span");
                builder.AddAttribute(seq++, "class", "text-muted small");
                builder.AddContent(seq++, "No parameters available for this action type.");
                builder.CloseElement();
                break;
        }
    };

    private async Task StartCaptureTemplate(ScriptCondition condition)
    {
        try
        {
            currentConditionForTemplate = condition;
            showCaptureTemplateModal = true;
            StateHasChanged();

            // Select region on desktop
            var selectedRegion = await ScreenshotService.SelectDesktopRegionAsync();

            if (selectedRegion.HasValue)
            {
                var rect = selectedRegion.Value;
                
                // Capture screenshot of the region
                var screenshot = await ScreenshotService.CaptureRegionAsync(
                    rect.X, rect.Y, rect.Width, rect.Height
                );

                if (screenshot != null)
                {
                    capturedTemplateData = screenshot;
                    capturedRegion = rect;
                    newTemplateName = $"Template_{DateTime.Now:yyyyMMdd_HHmmss}";
                }
                else
                {
                    ShowStatus("Failed to capture screenshot", "alert-danger");
                }
            }
            else
            {
                ShowStatus("Region selection cancelled", "alert-info");
            }
        }
        catch (Exception ex)
        {
            _logger?.LogError(ex, "Error capturing template");
            ShowStatus($"Error capturing template: {ex.Message}", "alert-danger");
        }
        finally
        {
            showCaptureTemplateModal = false;
            StateHasChanged();
        }
    }

    private async Task SaveCapturedTemplate()
    {
        if (string.IsNullOrWhiteSpace(newTemplateName))
        {
            ShowStatus("Please enter a template name", "alert-warning");
            return;
        }

        if (capturedTemplateData == null || currentConditionForTemplate == null)
        {
            ShowStatus("No template data to save", "alert-danger");
            return;
        }

        try
        {
            // Create and save the template
            var template = new TemplateImage
            {
                Name = newTemplateName,
                ImageData = capturedTemplateData,
                CaptureRegion = capturedRegion,
                MatchThreshold = 0.8
            };

            var templateId = await ScriptStorage.SaveTemplateImageAsync(template);
            
            // Reload templates to include the new one
            await LoadScripts();

            // Automatically select this template in the condition
            currentConditionForTemplate.Parameters["templateImageId"] = templateId;

            ShowStatus($"‚úÖ Template '{newTemplateName}' saved and selected!", "alert-success");
            
            // Close the modal
            CloseCaptureTemplateModal();
        }
        catch (Exception ex)
        {
            _logger?.LogError(ex, "Error saving captured template");
            ShowStatus($"Error saving template: {ex.Message}", "alert-danger");
        }
    }

    private void CloseCaptureTemplateModal()
    {
        showCaptureTemplateModal = false;
        capturedTemplateData = null;
        newTemplateName = string.Empty;
        currentConditionForTemplate = null;
        capturedRegion = default;
        StateHasChanged();
    }

    private async Task OnWindowHandleChanged(IntPtr handle)
    {
        selectedWindowHandle = handle;
        PersistWindowSelectionToScript();
        await InvokeAsync(StateHasChanged);
    }

    private Task OnWindowSelected(WindowInfo? window)
    {
        selectedWindowDescription = window == null
            ? string.Empty
            : $"{window.Title} ({window.ProcessName}) [{window.HandleHex}]";
        PersistWindowSelectionToScript();
        return Task.CompletedTask;
    }
}