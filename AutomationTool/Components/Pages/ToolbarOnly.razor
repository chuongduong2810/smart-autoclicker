@page "/toolbar-only"
@using AutomationTool.Services
@using AutomationTool.Models
@inject IScriptExecutionService ScriptExecution
@inject IScriptStorageService ScriptStorage
@implements IDisposable
@rendermode InteractiveServer

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Automation Toolbar</title>
    <style>
        body {
            margin: 0;
            padding: 0;
            background: linear-gradient(135deg, rgba(30,30,30,0.95), rgba(20,20,20,0.95));
            color: white;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            overflow: hidden;
            width: 100vw;
            height: 100vh;
            backdrop-filter: blur(10px);
        }

        .toolbar-container {
            display: flex;
            align-items: center;
            padding: 8px 12px;
            height: 100vh;
            box-sizing: border-box;
            gap: 12px;
        }

        .status-section {
            flex: 1;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .status-indicator {
            width: 12px;
            height: 12px;
            border-radius: 50%;
            animation: pulse 2s infinite;
        }

        .status-indicator.running { background: #28a745; }
        .status-indicator.paused { background: #ffc107; animation: none; }
        .status-indicator.stopped { background: #dc3545; animation: none; }

        .status-info {
            display: flex;
            flex-direction: column;
        }

        .script-name {
            font-weight: 600;
            font-size: 13px;
            max-width: 150px;
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
        }

        .status-text {
            font-size: 10px;
            color: #aaa;
        }

        .controls {
            display: flex;
            gap: 6px;
        }

        .btn {
            background: rgba(255,255,255,0.1);
            border: 1px solid rgba(255,255,255,0.2);
            color: white;
            padding: 6px 8px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 11px;
            min-width: 50px;
            transition: all 0.2s;
        }

        .btn:hover {
            background: rgba(255,255,255,0.2);
            transform: translateY(-1px);
        }

        .btn-pause:hover { background: rgba(255, 193, 7, 0.3); }
        .btn-resume:hover { background: rgba(40, 167, 69, 0.3); }
        .btn-stop:hover { background: rgba(220, 53, 69, 0.3); }

        .progress-bar {
            width: 100%;
            height: 3px;
            background: rgba(255,255,255,0.2);
            margin-top: 4px;
            border-radius: 2px;
            overflow: hidden;
        }

        .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, #28a745, #20c997);
            transition: width 0.3s;
        }

        .progress-text {
            font-size: 9px;
            color: #aaa;
            margin-top: 2px;
        }

        @@keyframes pulse {
            0%, 100% { opacity: 1; transform: scale(1); }
            50% { opacity: 0.5; transform: scale(1.1); }
        }

        .infinite-indicator {
            display: flex;
            align-items: center;
            gap: 6px;
            font-size: 10px;
        }

        .pulse-dot {
            width: 6px;
            height: 6px;
            background: #17a2b8;
            border-radius: 50%;
            animation: pulse 1.5s infinite;
        }
    </style>
</head>
<body>
    @if (hasActiveExecution && currentState != null)
    {
        <div class="toolbar-container">
            <div class="status-section">
                <div class="status-indicator @GetStatusClass()"></div>
                <div class="status-info">
                    <div class="script-name">@(currentScript?.Name ?? "Unknown Script")</div>
                    <div class="status-text">@GetStatusText()</div>
                    @if (currentState.IsInfiniteRepeat)
                    {
                        <div class="infinite-indicator">
                            <span class="pulse-dot"></span>
                            <span>Repeat #@currentState.CurrentRepeat ♾️</span>
                        </div>
                    }
                    else if (currentState.TotalRepeats > 1)
                    {
                        <div class="progress-bar">
                            <div class="progress-fill" style="width: @(((double)currentState.CurrentRepeat / currentState.TotalRepeats) * 100)%"></div>
                        </div>
                        <div class="progress-text">@currentState.CurrentRepeat/@currentState.TotalRepeats repeats</div>
                    }
                </div>
            </div>
            
            <div class="controls">
                @if (currentState.Status == "RUNNING")
                {
                    <button class="btn btn-pause" @onclick="PauseScript">
                        ⏸ Pause
                    </button>
                }
                else if (currentState.Status == "PAUSED")
                {
                    <button class="btn btn-resume" @onclick="ResumeScript">
                        ▶ Resume
                    </button>
                }
                
                <button class="btn btn-stop" @onclick="StopScript">
                    ⏹ Stop
                </button>
            </div>
        </div>
    }
    else
    {
        <div class="toolbar-container">
            <div class="script-name">No Active Script</div>
        </div>
    }
</body>
</html>

@code {
    private bool hasActiveExecution = false;
    private ScriptExecutionState? currentState;
    private AutomationScript? currentScript;
    private System.Threading.Timer? refreshTimer;

    protected override async Task OnInitializedAsync()
    {
        ScriptExecution.StateChanged += OnStateChanged;
        refreshTimer = new System.Threading.Timer(async _ => await InvokeAsync(RefreshState), null, TimeSpan.Zero, TimeSpan.FromSeconds(1));
        await RefreshState();
    }

    private async Task RefreshState()
    {
        try
        {
            var states = ScriptExecution.GetAllExecutionStates();
            var activeState = states.FirstOrDefault(s => s.Status == "RUNNING" || s.Status == "PAUSED");
            
            if (activeState != null)
            {
                currentState = activeState;
                hasActiveExecution = true;
                
                try
                {
                    currentScript = await ScriptStorage.GetScriptAsync(activeState.ScriptId);
                }
                catch
                {
                    currentScript = new AutomationScript { Name = $"Script {activeState.ScriptId[..8]}..." };
                }
            }
            else
            {
                hasActiveExecution = false;
                currentState = null;
                currentScript = null;
            }
            
            StateHasChanged();
        }
        catch
        {
            // Ignore errors during refresh
        }
    }

    private void OnStateChanged(object? sender, ScriptExecutionState state)
    {
        InvokeAsync(RefreshState);
    }

    private string GetStatusClass()
    {
        return currentState?.Status?.ToLower() switch
        {
            "running" => "running",
            "paused" => "paused",
            _ => "stopped"
        };
    }

    private string GetStatusText()
    {
        if (currentState == null) return "STOPPED";
        
        var status = currentState.Status?.ToUpper() ?? "UNKNOWN";
        var duration = DateTime.Now - currentState.StartTime;
        
        return $"{status} • {duration:hh\\:mm\\:ss}";
    }

    private async Task PauseScript()
    {
        if (currentState != null)
        {
            await ScriptExecution.PauseScriptAsync(currentState.ScriptId);
        }
    }

    private async Task ResumeScript()
    {
        if (currentState != null)
        {
            await ScriptExecution.ResumeScriptAsync(currentState.ScriptId);
        }
    }

    private async Task StopScript()
    {
        if (currentState != null)
        {
            await ScriptExecution.StopScriptAsync(currentState.ScriptId);
        }
    }

    public void Dispose()
    {
        ScriptExecution.StateChanged -= OnStateChanged;
        refreshTimer?.Dispose();
    }
}
