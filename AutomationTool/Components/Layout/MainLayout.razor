@inherits LayoutComponentBase
@implements IDisposable
@using AutomationTool.Components.Shared
@using Microsoft.AspNetCore.Components.Routing
@using System.Globalization
@inject NavigationManager Navigation

<div class="layout-shell @(_isSidebarCollapsed ? "collapsed" : string.Empty)">
    <aside class="layout-sidebar">
        <div class="sidebar-top">
            <button class="sidebar-toggle" type="button" @onclick="ToggleSidebar" title="Toggle navigation">
                <span class="sr-only">Toggle navigation</span>
                <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M4 7h16M4 12h16M4 17h16" stroke="currentColor" stroke-width="1.8" stroke-linecap="round" />
                </svg>
            </button>

            <div class="sidebar-brand">
                <div class="brand-icon">
                    <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M13 10V3L4 14h7v7l9-11h-7z" fill="currentColor" />
                    </svg>
                </div>
                <div class="brand-meta">
                    <span class="brand-name">Smart Auto Clicker</span>
                    <span class="brand-version">Automation Toolkit • v1.0</span>
                </div>
            </div>
        </div>

        <NavMenu />

        <footer class="sidebar-footer">
            <div class="status-badge online">
                <span class="dot"></span>
                <span>System Online</span>
            </div>
            <small>Synced moments ago</small>
        </footer>
    </aside>

    <div class="layout-main">
        <header class="layout-header">
            <div class="header-left">
                <div class="header-title">
                    <span class="title-label">Current View</span>
                    <h1>@_currentSection</h1>
                </div>
            </div>

            <div class="header-actions">
                <div class="status-badge header-status">
                    <span class="dot"></span>
                    <span>Automation Engine Ready</span>
                </div>
                <NavLink class="header-btn secondary" href="/execution">
                    <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M8 5v14l11-7z" fill="currentColor" />
                    </svg>
                    View Executions
                </NavLink>
                <NavLink class="header-btn primary" href="/scripts">
                    <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M12 5v6H6v2h6v6h2v-6h6v-2h-6V5h-2z" fill="currentColor" />
                    </svg>
                    New Script
                </NavLink>
            </div>
        </header>

        <main class="layout-content">
            <article class="content">
                @Body
            </article>
        </main>
    </div>

    @if (_isSidebarCollapsed)
    {
        <div class="mobile-overlay" @onclick="ToggleSidebar"></div>
    }
</div>

<!-- Global Execution Toolbar -->
<ExecutionToolbar />

@code {
    private bool _isSidebarCollapsed;
    private string _currentSection = "Dashboard";

    protected override void OnInitialized()
    {
        UpdateCurrentSection();
        Navigation.LocationChanged += HandleLocationChanged;
    }

    private void ToggleSidebar()
    {
        _isSidebarCollapsed = !_isSidebarCollapsed;
    }

    private void HandleLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        UpdateCurrentSection();
        InvokeAsync(StateHasChanged);
    }

    private void UpdateCurrentSection()
    {
        var key = Navigation.ToBaseRelativePath(Navigation.Uri).Trim('/');

        if (string.IsNullOrEmpty(key))
        {
            _currentSection = "Dashboard";
            return;
        }

        _currentSection = key switch
        {
            "screenshot" => "Screenshot Capture",
            "scripts" => "Automation Scripts",
            "templates" => "Template Library",
            "execution" => "Execution Monitor",
            _ => CultureInfo.CurrentCulture.TextInfo.ToTitleCase(key.Replace('-', ' '))
        };
    }

    public void Dispose()
    {
        Navigation.LocationChanged -= HandleLocationChanged;
    }
}
